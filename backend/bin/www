#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket.io
 */
const { Server } = require("socket.io");
const io = new Server(server);

io.on('connection', socket => {
  console.log('nueva connection', socket.id)

  socket.on('chat:message', data => {
    io.emit('chat:message', data);
  });

  socket.on('chat:typing', data => {
    socket.broadcast.emit('chat:typing', data)
  })
});

const signalServer = require('simple-signal-server')(io)
const rooms = {}

signalServer.on('discover', (request) => {
  const clientID = request.socket.id // clients are uniquely identified by socket.id
  const roomID = request.discoveryData

  if (!request.discoveryData) {
    console.log('no room')
    return
  }

  if (!rooms.hasOwnProperty(roomID)) rooms[roomID] = new Set()

  // if peer was already in a room then remove peer from that room
  if (request.socket.roomID && rooms.hasOwnProperty(request.socket.roomID)) {
    rooms[request.socket.roomID].delete(clientID)
  }

  if (request.socket.roomID !== roomID) {
    request.socket.roomID = roomID
    rooms[roomID].add(clientID)
  }

  request.discover({
    roomResponse: roomID, // return the roomID so client can correlate discovery data
    peers: Array.from(rooms[roomID])
  })
})

signalServer.on('disconnect', (socket) => {
  rooms[socket.roomID].delete(socket.id)
  if (!rooms[socket.roomID].size) delete rooms[socket.roomID]
})

signalServer.on('request', (request) => {
  request.forward() // forward all requests to connect
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
