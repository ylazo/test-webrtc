#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const {
  rooms,
  createRoom,
  getRoom,
  addToRoom,
  deleteFromRoom,
  deleteRoom,
  setAdminSocketId
} = require('../Controllers/rooms.controller.js')
const { verifyAccessToken, verifyRoomAccessToken } = require('../Controllers/jwt.controller.js')
const { setAdminEvents, setClientEvents } = require('./socket.events')

const checkRoomAuthorization = async (token) => {
  const {
    roomId,
    userId,
    creatorUserId: clientCreatorUserId
  } = await verifyRoomAccessToken(token)

  const { creatorUserId, peersIds } = getRoom(roomId)

  if (!(creatorUserId === clientCreatorUserId)) {
    throw new Error('Usuario no autorizado')
  }

  return { roomId, userId, creatorUserId }
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket.io
 */
const { Server } = require("socket.io");
const io = new Server(server);

io.use(async (socket, next) => {
  try {
    await verifyAccessToken(socket.handshake.auth.token)
    next()
  } catch (e) {
    next(new Error('Usuario no autorizado'))
  }
})

io.on('connection', async socket => {
  try {
    const { userId, roomId, creatorUserId } = await checkRoomAuthorization(socket.handshake.auth.roomToken)
    socket.emit('roomJoined')

    if (userId === creatorUserId) {
      setAdminSocketId(roomId, socket.id)
      setAdminEvents(socket, io)
    }
  } catch (e) {
    setClientEvents(socket, io)
  }

  socket.on('disconnect', (reason) => {
    socket.removeAllListeners()
  })

});

const signalServer = require('simple-signal-server')(io)

signalServer.on('discover', async (request) => {
  try {
    const { socket, discoveryData } = request
    const { roomId, token } = discoveryData

    await checkRoomAuthorization(socket.handshake.auth.roomToken)

    if (socket.roomId && rooms.hasOwnProperty(socket.roomId)) {
      deleteFromRoom(socket.roomId, socket.id)
      socket.roomId = null
    }

    if (!(socket.roomId === roomId)) {
      socket.roomId = roomId
      addToRoom(roomId, socket.id)
    }

    request.discover({
      roomResponse: roomId, // return the roomID so client can correlate discovery data
      peers: getRoom(roomId).peersIds
    })
  } catch (e) {
    console.warn(e)
    socket.emit('discover_error', e)
  }
})

signalServer.on('disconnect', (socket) => {
  try {
    deleteFromRoom(socket.roomId, socket.id)
  } catch (e) {
    // console.warn(e)
  }
})

signalServer.on('request', (request) => {
  request.forward() // forward all requests to connect
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
